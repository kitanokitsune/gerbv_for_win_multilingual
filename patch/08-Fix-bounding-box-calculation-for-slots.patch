diff -uprN a/src/callbacks.c b/src/callbacks.c
--- a/src/callbacks.c	2023-08-21 15:52:24.000000000 +0900
+++ b/src/callbacks.c	2024-07-05 05:56:52.204182800 +0900
@@ -1281,6 +1281,9 @@ callbacks_analyze_active_gerbers_activat
 	table_add_row(M_table, "M00", stat->M0, _(gerber_m_code_name(0)));
 	table_add_row(M_table, "M01", stat->M1, _(gerber_m_code_name(1)));
 	table_add_row(M_table, "M02", stat->M2, _(gerber_m_code_name(2)));
+	table_add_row(M_table, "M15", stat->M15, _(gerber_m_code_name(15)));
+	table_add_row(M_table, "M16", stat->M16, _(gerber_m_code_name(16)));
+	table_add_row(M_table, "M17", stat->M17, _(gerber_m_code_name(17)));
 	table_add_row(M_table, "", stat->M_unknown, _("unknown M-codes"));
 
 	table_set_sortable(M_table);
diff -uprN a/src/drill.c b/src/drill.c
--- a/src/drill.c	2023-08-21 15:52:24.000000000 +0900
+++ b/src/drill.c	2024-07-05 05:53:17.271889400 +0900
@@ -105,6 +105,9 @@ typedef struct drill_state {
      * place in the file
      */
     int decimals;
+    /* if set to 1, the next X/Y coordinate indicates a routing bit move
+       in order to drill a slot from the current location */
+    int drill_slot;
 
 } drill_state_t;
 
@@ -283,6 +286,53 @@ drill_add_drill_hole (gerbv_image_t *ima
     return curr_net;
 }
 
+/*
+ * Extends the existing hole into a slot
+ */
+static gerbv_net_t *
+drill_add_drill_slot (gerbv_image_t *image, drill_state_t *state, gerbv_drill_stats_t *stats, gerbv_net_t *curr_net)
+{
+	curr_net->start_x = curr_net->stop_x;
+	curr_net->start_y = curr_net->stop_y;
+
+	curr_net->stop_x = (double)state->curr_x;
+	curr_net->stop_y = (double)state->curr_y;
+
+	/* KLUDGE. All images must be returned in INCH format. */
+	if (state->unit == GERBV_UNIT_MM) {
+		curr_net->stop_x /= 25.4;
+		curr_net->stop_y /= 25.4;
+		curr_net->state->unit = GERBV_UNIT_INCH;
+	}
+
+	curr_net->stop_x -= state->origin_x;
+	curr_net->stop_y -= state->origin_y;
+	curr_net->aperture_state = GERBV_APERTURE_STATE_ON;
+
+	/* Return if the aperture is not set. */
+	if (image->aperture[state->current_tool] == NULL)
+		return curr_net;
+
+	/* Find min and max coordinates, adding the hole radius. */
+	double radius = image->aperture[state->current_tool]->parameter[0] / 2;
+	double x_min  = curr_net->stop_x + state->origin_x - radius;
+	double x_max  = curr_net->stop_x + state->origin_x + radius;
+	double y_min  = curr_net->stop_y + state->origin_y - radius;
+	double y_max  = curr_net->stop_y + state->origin_y + radius;
+
+	curr_net->boundingBox.left   = MIN(curr_net->boundingBox.left,   x_min);
+	curr_net->boundingBox.right  = MAX(curr_net->boundingBox.right,  x_max);
+	curr_net->boundingBox.bottom = MIN(curr_net->boundingBox.bottom, y_min);
+	curr_net->boundingBox.top    = MAX(curr_net->boundingBox.top,    y_max);
+
+	image->info->min_x = MIN(image->info->min_x, x_min);
+	image->info->max_x = MAX(image->info->max_x, x_max);
+	image->info->min_y = MIN(image->info->min_y, y_min);
+	image->info->max_y = MAX(image->info->max_y, y_max);
+
+	return curr_net;
+}
+
 /* -------------------------------------------------------------- */
 gerbv_image_t *
 parse_drillfile(gerb_file_t *fd, gerbv_HID_Attribute *attr_list, int n_attr, int reload)
@@ -464,7 +514,19 @@ parse_drillfile(gerb_file_t *fd, gerbv_H
 	    switch (g_code = drill_parse_G_code(fd, image, file_line)) {
 
 	    case DRILL_G_DRILL :
-		/* Drill mode */
+ 	    case DRILL_G_ROUT :
+		state->drill_slot = 0;
+		break;
+
+	    case DRILL_G_LINEARMOVE :
+		state->drill_slot = -1;
+		if (curr_net->aperture_state == GERBV_APERTURE_STATE_ON) {
+		    /* Allows multiple routing moves in a row.  Not sure if any
+		       CAD package generates this but might as well allow it. */
+		    curr_net = drill_add_drill_hole(
+			image, state, stats, curr_net
+		    );
+		}
 		break;
 
 	    case DRILL_G_SLOT : {
@@ -675,6 +737,9 @@ parse_drillfile(gerb_file_t *fd, gerbv_H
 		break;
 	    case DRILL_M_PATTERNEND :
 	    case DRILL_M_TOOLTIPCHECK :
+	    case DRILL_M_ZAXISROUTEPOSITION :
+	    case DRILL_M_RETRACTCLAMPING :
+	    case DRILL_M_RETRACTNOCLAMPING :
 		break;
 
 	    case DRILL_M_END :
@@ -804,9 +869,17 @@ parse_drillfile(gerb_file_t *fd, gerbv_H
 	case 'Y':
 	    /* Hole coordinate found. Do some parsing */
 	    drill_parse_coordinate(fd, read, image, state, file_line);
-	    
-	    /* add the new drill hole */
-	    curr_net = drill_add_drill_hole (image, state, stats, curr_net);
+
+	    if (state->drill_slot) {
+		/* add the slot */
+		curr_net = drill_add_drill_slot(image, state, stats, curr_net);
+		/* X may be followed by Y but otherwise, it's a one-shot thing */
+		if (state->drill_slot > 0 && ++state->drill_slot > 2)
+		    state->drill_slot = 0;
+	    } else {
+		/* add the new drill hole */
+		curr_net = drill_add_drill_hole(image, state, stats, curr_net);
+	    }
 	    break;
 
 	case '%':
@@ -814,22 +887,29 @@ parse_drillfile(gerb_file_t *fd, gerbv_H
 	    break;
 
 	case '\n' :
-	    file_line++;
-
-	    /* Get <CR> char, if any, from <LF><CR> pair */
-	    read = gerb_fgetc(fd);
-	    if (read != '\r' && read != EOF)
-		    gerb_ungetc(fd);
-	    break;
+	case '\r' : {
+	    int curr = read;
 
-	case '\r' :
 	    file_line++;
 
-	    /* Get <LF> char, if any, from <CR><LF> pair */
+	    /* Get <CR> or <LF> char, if any, from <LF><CR> pair */
 	    read = gerb_fgetc(fd);
-	    if (read != '\n' && read != EOF)
+	    if (read != curr && read != EOF)
 		    gerb_ungetc(fd);
+
+	    if (state->drill_slot < 0) {
+		if (curr_net->aperture_state == GERBV_APERTURE_STATE_ON) {
+		    /* Allows multiple routing moves in a row.  Not sure if any
+		       CAD package generates this but might as well allow it. */
+		    curr_net = drill_add_drill_hole(
+			image, state, stats, curr_net
+		    );
+		}
+	    } else {
+		state->drill_slot = 0;
+	    }
 	    break;
+	}
 
 	case ' ' :	/* White space */
 	case '\t' :
@@ -1331,6 +1411,15 @@ drill_parse_M_code(gerb_file_t *fd, dril
     case 1:
 	stats->M01++;
 	break;
+    case 15:
+	stats->M15++;
+	break;
+    case 16:
+	stats->M16++;
+	break;
+    case 17:
+	stats->M17++;
+	break;
     case 18:
 	stats->M18++;
 	break;
@@ -1854,6 +1943,7 @@ new_state(drill_state_t *state)
 	state->header_number_format = state->number_format = FMT_00_0000; /* i. e. INCH */
 	state->autod = 1;
 	state->decimals = 4;
+	state->drill_slot = 0;
     }
 
     return state;
diff -uprN a/src/drill_stats.c b/src/drill_stats.c
--- a/src/drill_stats.c	2023-08-21 15:52:24.000000000 +0900
+++ b/src/drill_stats.c	2024-07-05 05:53:17.299891000 +0900
@@ -136,6 +136,9 @@ gerbv_drill_stats_add_layer(gerbv_drill_
 
     accum_stats->M00 += input_stats->M00;
     accum_stats->M01 += input_stats->M01;
+    accum_stats->M15 += input_stats->M15;
+    accum_stats->M16 += input_stats->M16;
+    accum_stats->M17 += input_stats->M17;
     accum_stats->M18 += input_stats->M18;
     accum_stats->M25 += input_stats->M25;
     accum_stats->M30 += input_stats->M30;
diff -uprN a/src/gerber.c b/src/gerber.c
--- a/src/gerber.c	2023-08-21 15:52:24.000000000 +0900
+++ b/src/gerber.c	2024-07-05 05:55:56.536998900 +0900
@@ -2724,6 +2724,9 @@ const char *gerber_m_code_name(int m_cod
 	case 0:  return N_("program stop (obsolete)");
 	case 1:  return N_("optional stop (obsolete)");
 	case 2:  return N_("end of file");
+	case 15: return N_("Z-axis route position");
+	case 16: return N_("Retract with clamping");
+	case 17: return N_("Retract without clamping");
 	default: return N_("unknown M-code");
 	}
 } /* gerber_m_code_name() */
diff -uprN a/src/gerbv.h b/src/gerbv.h
--- a/src/gerbv.h	2023-08-21 15:52:24.000000000 +0900
+++ b/src/gerbv.h	2024-07-05 05:53:17.328892700 +0900
@@ -483,6 +483,9 @@ typedef struct {
     int M0;
     int M1;
     int M2;
+    int M15;
+    int M16;
+    int M17;
     int M_unknown;
 
     int X;
@@ -528,6 +531,9 @@ typedef struct {
 
     int M00;
     int M01;
+    int M15;
+    int M16;
+    int M17;
     int M18;
     int M25;
     int M30;
